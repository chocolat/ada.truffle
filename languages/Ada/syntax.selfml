(root source.ada
    (zone meta.function.ada
        (match
            (regex [\b(?i:(function|procedure))\b\s+(\w+(\.\w+)?|"(?:\+|-|=|\*|/)")]
                (1 storage.type.function.ada)
                (2 entity.name.function.ada))))
    (zone meta.function.ada
        (match
            (regex [\b(?i:(package)(?:\b\s+(body))?)\b\s+(\w+(\.\w+)?|"(?:\+|-|=|\*|/)")]
                (3 entity.name.type.package.ada)
                (1 storage.type.package.ada)
                (2 keyword.other.body.ada))))
    (zone meta.function.ada
        (match
            (regex [\b(?i:(end))\b\s+(\w+(\.\w+)?|"(\+|-|=|\*|/)")\s?;]
                (1 storage.type.function.ada)
                (2 entity.name.function.ada))))
    (zone meta.function.ada
        (match
            (regex [\b(?i:(with|use))\b\s+(\w+(\.\w+)?)\s?;]
                (1 keyword.control.import.ada)
                (2 string.unquoted.import.ada))))
    (zone keyword.control.ada
        (match
            (regex [\b(?i:(begin|end|package))\b])))
    (zone keyword.other.ada
        (match
            (regex [\b(?i:(\=>|abort|else|new|return|abs|elsif|not|reverse|abstract|null|accept|entry|select|access|exception|of|separate|aliased|exit|or|subtype|all|others|and|for|out|tagged|array|function|task|at|terminate|generic|pragma|then|goto|private|type|body|procedure|if|protected|until|case|in|use|constant|is|raise|range|when|declare|limited|record|while|delay|loop|rem|with|delta|renames|digits|mod|requeue|xor|do))\b])))
    (zone constant.numeric.ada
        (match
            (regex [\b((0(x|X)[0-9a-fA-F_]*)|(([0-9_]+\.?[0-9_]*)|(\.[0-9_]+))((e|E)(\+|-)?[0-9_]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b])))
    (zone string.quoted.double.ada
        (start
            (regex "
                (0 punctuation.definition.string.begin.ada)))
        (end
            (regex "
                (0 punctuation.definition.string.end.ada)))
        (subzones
            (zone invalid.illegal.lf-in-string.ada
                (match
                    (regex \n)))))
    (zone comment.line.double-dash.ada
        (match
            (regex [(--)(.*)$\n?]
                (1 punctuation.definition.comment.ada)))))